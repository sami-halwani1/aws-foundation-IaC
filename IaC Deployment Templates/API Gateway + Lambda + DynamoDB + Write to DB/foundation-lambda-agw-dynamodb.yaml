AWSTemplateFormatVersion: '2010-09-09'
Description: Create a Lambda Function with API Gateway that writes to a DynamoDB Database

Parameters:
  FunctionName:
    Type: String
    Default: foundation-lambda-writeto-dynamodb
    Description: Name of the Lambda Function
  TableName:
    Type: String
    Default: LambdaDynamoDBTable
    Description: Name of the DynamoDB Table
  ApiName:
    Type: String
    Default: FoundationApiGateway-WriteToDynamoDB
    Description: Name of the API Gateway


Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBTable.Arn

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from botocore.exceptions import ClientError

          dynamodb = boto3.resource('dynamodb')
          table_name = os.environ['TABLE_NAME']

          def lambda_handler(event, context):
              table = dynamodb.Table(table_name)
              try:
                  body = json.loads(event.get('body', '{}'))
                  response = table.put_item(
                      Item={
                          'id': body.get('id', 'default_id'),
                          'data': body.get('data', 'default_data')
                      }
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'message': 'Item added successfully', 'response': response})
                  }
              except ClientError as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }
      Timeout: 60
      MemorySize: 128
      Description: Lambda Function to write to DynamoDB

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: API Gateway for Lambda to write to DynamoDB
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: write
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method 
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/write"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
Outputs:
  ApiEndpoint:
    Description: The URL of the deployed API
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/write"
  DynamoDBTableName:
    Description: Name of the DynamoDB Table
    Value: !Ref DynamoDBTable
  LambdaFunctionName:
    Description: Name of the Lambda Function
    Value: !Ref MyLambdaFunction


